#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 917 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; No PLists in Racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"*op-table*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"*op-table*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"*op-table*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;; Define 6502 op codes."
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;; Basic test instructions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"c=1\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"176"
0 0 24 3 2 #") "
0 0 17 3 17 #";;; test carry=1."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"c=0\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"144"
0 0 24 3 2 #") "
0 0 17 3 17 #";;; test carry=0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"llt"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"144"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; logically <."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"lge"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"176"
0 0 24 3 2 #") "
0 0 17 3 17 #";;; logically >=."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"=\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"240"
0 0 24 3 2 #") "
0 0 17 3 10 #";;; equal."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"~=\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"208"
0 0 24 3 2 #") "
0 0 17 3 14 #";;; not equal."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"=0\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"240"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; equals zero."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"\313\234~=0\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"208"
0 0 24 3 2 #") "
0 0 17 3 22 #";;; not equal to zero."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"v=1\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 3 #"112"
0 0 24 3 2 #") "
0 0 17 3 20 #";;; test overflow=1."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"v=0\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 2 #") "
0 0 17 3 20 #";;; test overflow=0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"<\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 2 #"48"
0 0 24 3 2 #") "
0 0 17 3 22 #";;; test arithmetic <."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #">=\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 17 3 23 #";;; test arithmetic >=."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"<0\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 2 #"48"
0 0 24 3 2 #") "
0 0 17 3 23 #";;; test arithmetic <0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #">=0\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 17 3 24 #";;; test arithmetic >=0."
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Group 0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"\\?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 2 #") "
0 0 17 3 9 #";;; test."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"stj"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"152"
0 0 24 3 2 #") "
0 0 17 3 12 #";;; store j."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"lj"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"168"
0 0 24 3 2 #") "
0 0 17 3 11 #";;; load j."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"cj"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 17 3 14 #";;; compare j."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ci"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"232"
0 0 24 3 2 #") "
0 0 17 3 14 #";;; compare i."
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Group 1."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"lor"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 2 #") "
0 0 17 3 15 #";;; logical or."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"land"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"49"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; logical and."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"lxor"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; logical xor."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"113"
0 0 24 3 2 #") "
0 0 17 3 19 #";;; add with carry."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"145"
0 0 24 3 2 #") "
0 0 17 3 22 #";;; store accumulator."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"177"
0 0 24 3 2 #") "
0 0 17 3 21 #";;; load accumulator."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"209"
0 0 24 3 2 #") "
0 0 17 3 24 #";;; compare accumulator."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"241"
0 0 24 3 2 #") "
0 0 17 3 25 #";;; subtract with borrow."
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Group 2."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"asl"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 17 3 26 #";;; arithmetic shift left."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"rl"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; rotate left."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"lsr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"74"
0 0 24 3 2 #") "
0 0 17 3 24 #";;; logical shift right."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"rr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"106"
0 0 24 3 2 #") "
0 0 17 3 17 #";;; rotate right."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sti"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"138"
0 0 24 3 2 #") "
0 0 17 3 12 #";;; store i."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"li"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"170"
0 0 24 3 2 #") "
0 0 17 3 11 #";;; load i."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"1-"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"194"
0 0 24 3 2 #") "
0 0 17 3 14 #";;; decrement."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"1+"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"226"
0 0 24 3 2 #") "
0 0 17 3 14 #";;; increment."
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;; random instructions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"trap"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 17 3 21 #";;; programmed break."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 17 3 36 #";;; push processor state onto stack."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 17 3 39 #";;; restore processor state from stack."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"72"
0 0 24 3 2 #") "
0 0 17 3 32 #";;; push accumulator onto stack."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"104"
0 0 24 3 2 #") "
0 0 17 3 31 #";;; pop accumulator from stack."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"c=0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; clear carry."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"c=1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"56"
0 0 24 3 2 #") "
0 0 17 3 14 #";;; set carry."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"seb"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 2 #") "
0 0 17 3 15 #";;; set borrow."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"clb"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"56"
0 0 24 3 2 #") "
0 0 17 3 17 #";;; clear borrow."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"v=0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"184"
0 0 24 3 2 #") "
0 0 17 3 19 #";;; clear overflow."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"enable"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 2 #"88"
0 0 24 3 2 #") "
0 0 17 3 22 #";;; enable interrupts."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"disable"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 2 #") "
0 0 17 3 23 #";;; disable interrupts."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"binary"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"216"
0 0 24 3 2 #") "
0 0 17 3 20 #";;; set binary mode."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"decimal"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"248"
0 0 24 3 2 #") "
0 0 17 3 21 #";;; set decimal mode."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"i+1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"232"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; increment i."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"j+1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; increment j."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"i-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"202"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; decrement i."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"j-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"skele"
0 0 14 3 1 #"t"
0 0 14 3 2 #"on"
0 0 24 3 1 #" "
0 0 21 3 3 #"136"
0 0 24 3 2 #") "
0 0 17 3 16 #";;; decrement j."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"nop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skeleton"
0 0 24 3 1 #" "
0 0 21 3 3 #"234"
0 0 24 3 2 #") "
0 0 17 3 17 #";;; no operation."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"jump"
0 0 24 3 1 #" "
0 0 21 3 2 #"96"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"resume"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"jump"
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"jmp"
0 0 24 3 1 #" "
0 0 21 3 2 #"76"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"jsr"
0 0 24 3 1 #" "
0 0 21 3 2 #"72"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";Vector where the compiled code is placed."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";Compiled code array pointer; it works its way down from the top.\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"mem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";predicate to tell whether \"e\" is a test."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"testp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";predicate to tell whether \"e\" is an action."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"actionp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 4 #"))))"
0           0
